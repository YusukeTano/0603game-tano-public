name: Terraform Dev Pipeline
on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
env:
  TF_VERSION: 1.9.2
  TF_WORKING_DIR: infra/static-website/environments/dev
jobs:
  # 1) feature push: fmt/validate/tflint + Draft PR create/update
  feature_checks_and_draft_pr:
    name: feature checks + draft PR
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/') && github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform ${{ env.TF_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Cache TFLint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-plugins-${{ hashFiles('**/.tflint.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tflint-plugins-
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
      - name: Terraform fmt (check recursive)
        run: terraform fmt -check -recursive
      - name: Terraform init (no backend)
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" init -backend=false -input=false -no-color -reconfigure
      - name: Terraform validate (dev)
        run: |
          terraform -chdir="${{ env.TF_WORKING_DIR }}" validate -no-color
      - name: TFLint (recursive, cached plugins)
        run: |
          tflint --recursive "${{ env.TF_WORKING_DIR }}"
      - name: Create or update Draft PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const headBranch = context.ref.replace('refs/heads/','');
            const base = 'main';
            // Find existing open PR from this branch
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${headBranch}` });
            const title = `Draft: ${headBranch}`;
            const body = `Auto-created/updated draft PR for feature branch '${headBranch}'.`;
            if (prs.length > 0) {
              const pr = prs[0];
              await github.rest.pulls.update({ owner, repo, pull_number: pr.number, title, body, base, draft: true });
              core.info(`Updated existing draft PR #${pr.number}`);
            } else {
              const { data: pr } = await github.rest.pulls.create({ owner, repo, title, body, head: headBranch, base, draft: true });
              core.info(`Created draft PR #${pr.number}`);
            }
  # 2) PR Ready: real plan + sticky PR comment and artifacts
  pr_ready_plan:
    name: PR plan (ready only)
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials (Hub)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::318574063927:role/GitHubActionsHubRole
          aws-region: ap-northeast-1
      - name: Setup Terraform ${{ env.TF_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform init
        run: terraform init -no-color
      - name: Terraform plan (save tfplan)
        run: terraform plan -out=tfplan -no-color
      - name: Render plan to text and JSON
        run: |
          terraform show -no-color tfplan > plan.txt
          terraform show -json tfplan > plan.json
      - name: Summarize plan changes
        id: sum
        run: |
          ADD=$(jq '[.resource_changes[] | select(.change.actions | index("create"))] | length' plan.json)
          CHG=$(jq '[.resource_changes[] | select(.change.actions | index("update"))] | length' plan.json)
          DEL=$(jq '[.resource_changes[] | select(.change.actions | index("delete"))] | length' plan.json)
          echo "add=$ADD" >> $GITHUB_OUTPUT
          echo "chg=$CHG" >> $GITHUB_OUTPUT
          echo "del=$DEL" >> $GITHUB_OUTPUT
          echo "Computed summary: +$ADD ~${CHG} -$DEL"
      - name: Build sticky PR comment (with details)
        run: |
          cat > plan_comment.md << EOF
          ## Terraform Plan (dev)
          
          Summary: +${{ steps.sum.outputs.add }} ~${{ steps.sum.outputs.chg }} -${{ steps.sum.outputs.del }}
          
          <details>
          <summary>Show full plan</summary>
          
          ```
          $(cat plan.txt)
          ```
          </details>
          EOF
      - name: Post sticky PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan-dev
          path: ${{ env.TF_WORKING_DIR }}/plan_comment.md
          number: ${{ github.event.pull_request.number }}
      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-dev-${{ github.run_id }}
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan
            ${{ env.TF_WORKING_DIR }}/plan.txt
            ${{ env.TF_WORKING_DIR }}/plan.json
  # 3) main merge: apply to dev (only when infra/ changed)
  changes:
    name: Detect changed paths
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            infra:
              - 'infra/**'
  apply_dev:
    name: Apply to dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.infra == 'true'
    needs: changes
    runs-on: ubuntu-latest
    concurrency:
      group: terraform-dev
      cancel-in-progress: false
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials (Hub)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::318574063927:role/GitHubActionsHubRole
          aws-region: ap-northeast-1
      - name: Setup Terraform ${{ env.TF_VERSION }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false
      - name: Terraform init
        run: terraform init -no-color
      - name: Terraform apply (dev)
        run: terraform apply -auto-approve -lock-timeout=5m -no-color