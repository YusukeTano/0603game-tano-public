name: Feature Lint (No PR Creation)

on:
  push:
    branches: ['feature/**']
    paths:
      - 'infra/**'
      - '.tflint.hcl'
      - '.terraform-version'
      - '.github/workflows/terraform-ci-feature-lint-draftpr.yml'

permissions:
  contents: read
  pull-requests: read   # ‚Üê ÊúÄÂ∞èÂåñÔºà‰ΩúÊàê„Åó„Å™„ÅÑ„ÅÆ„Åß write ‰∏çË¶ÅÔºâ
  issues: write         # ‚Üê Êó¢Â≠òPR„Å∏„Ç≥„É°„É≥„Éà„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å

env:
  TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
  TFLINT_VERSION: v0.53.0

concurrency:
  group: lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-and-draft-pr:
    if: ${{ github.actor != 'github-actions[bot]' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Terraform„Éó„É©„Ç∞„Ç§„É≥„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-tfplugins-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: ${{ runner.os }}-tfplugins-

      # TFLint„Éó„É©„Ç∞„Ç§„É≥„Ç≠„É£„ÉÉ„Ç∑„É•
      - name: Cache TFLint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl', '**/.tflint.hcl') }}
          restore-keys: ${{ runner.os }}-tflint-

      # „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàêÔºà„Ç≠„É£„ÉÉ„Ç∑„É•Áî®Ôºâ
      - name: Create plugin cache dir
        run: mkdir -p ~/.terraform.d/plugin-cache

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      - uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      # Terraform fmt „ÉÅ„Çß„ÉÉ„ÇØ
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive infra/
        continue-on-error: true

      # Terraform validateÔºàlockfileË™≠„ÅøÂèñ„ÇäÂ∞ÇÁî®Ôºâ
      - name: Terraform Validate
        id: validate
        run: |
          for env in dev stg prd; do
            dir="infra/static-website/environments/$env"
            if [ -d "$dir" ]; then
              echo "::group::Validating $dir"
              pushd "$dir" > /dev/null
              terraform init -backend=false -input=false -lockfile=readonly
              terraform validate -no-color
              popd > /dev/null
              echo "::endgroup::"
            fi
          done
        continue-on-error: true

      # TFLintÂÆüË°å
      - name: TFLint
        id: tflint
        working-directory: infra
        run: |
          tflint --init
          tflint --recursive
        continue-on-error: true

      # „ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú„ÅÆ„Çµ„Éû„É™‰ΩúÊàê
      - name: Create Check Summary
        id: summary
        run: |
          SUMMARY="### üîç Terraform Check Results\n\n"
          SUMMARY="${SUMMARY}| Check | Status |\n"
          SUMMARY="${SUMMARY}|-------|--------|\n"

          if [ "${{ steps.fmt.outcome }}" == "success" ]; then
            SUMMARY="${SUMMARY}| Format | ‚úÖ Pass |\n"
          else
            SUMMARY="${SUMMARY}| Format | ‚ùå Fail |\n"
          fi

          if [ "${{ steps.validate.outcome }}" == "success" ]; then
            SUMMARY="${SUMMARY}| Validate | ‚úÖ Pass |\n"
          else
            SUMMARY="${SUMMARY}| Validate | ‚ö†Ô∏è Warning |\n"
          fi

          if [ "${{ steps.tflint.outcome }}" == "success" ]; then
            SUMMARY="${SUMMARY}| TFLint | ‚úÖ Pass |\n"
          else
            SUMMARY="${SUMMARY}| TFLint | ‚ö†Ô∏è Warning |\n"
          fi

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Êó¢Â≠ò„ÅÆPR„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà‰ΩúÊàê„ÅØ„Åó„Å™„ÅÑÔºâ
      - name: Check for existing PR
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branch}`,
              base: 'main',
              state: 'open'
            });
            if (prs.length > 0) {
              console.log(`Found existing PR #${prs[0].number}`);
              return prs[0].number;
            }
            return '';
          result-encoding: string

      # PR„Åå„Éâ„É©„Éï„Éà„Åß„Å™„ÅÑÂ†¥Âêà„Å´„Å†„ÅëË≠¶Âëä„Ç≥„É°„É≥„ÉàÔºàPR‰ΩúÊàê„ÅØ„Åó„Å™„ÅÑÔºâ
      - name: Warn if PR is not Draft
        if: steps.check-pr.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt('${{ steps.check-pr.outputs.result }}');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            if (!pr.draft) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ö†Ô∏è **Ê≥®ÊÑè**: „Åì„ÅÆPR„ÅØ„Åæ„Å†„É¨„Éì„É•„ÉºÊ∫ñÂÇô„ÅåÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\nTerraform„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`
              });
            }
        continue-on-error: true

      # Êó¢Â≠òPR„Å´ÁµêÊûú„Ç≥„É°„É≥„ÉàÔºàÊó¢Â≠òPR„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøÔºâ
      - name: Comment on existing PR
        if: steps.check-pr.outputs.result != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt('${{ steps.check-pr.outputs.result }}');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `### üîÑ Êñ∞„Åó„ÅÑ„Ç≥„Éü„ÉÉ„Éà„Åå„Éó„ÉÉ„Ç∑„É•„Åï„Çå„Åæ„Åó„Åü

            **Commit:** \`${context.sha.substring(0, 7)}\`
            **Author:** @${context.actor}
            **Branch:** \`${context.ref.replace('refs/heads/', '')}\`

            ${{ steps.summary.outputs.summary }}

            **Ë©≥Á¥∞:** [Actions Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
            console.log(`‚úÖ Added comment to PR #${prNumber}`);

      # „Ç∏„Éß„Éñ„Çµ„Éû„É™„Éº„ÅÆËøΩÂä†
      - name: Add Job Summary
        if: always()
        run: |
          echo "## üìä Terraform CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.summary.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-pr.outputs.result }}" != "" ]; then
            echo "### üìå Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "- PR: #${{ steps.check-pr.outputs.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- Status: Existing PR updated with comment" >> $GITHUB_STEP_SUMMARY
          else
            echo "### üìå Pull Request" >> $GITHUB_STEP_SUMMARY
            echo "- Status: No open PR. (Creation disabled)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìù Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the check results above" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix any formatting or validation issues" >> $GITHUB_STEP_SUMMARY
          echo "3. Run \`terraform plan\` locally to verify changes" >> $GITHUB_STEP_SUMMARY
          echo "4. Open or update a PR manually if needed" >> $GITHUB_STEP_SUMMARY
